<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:int="http://www.springframework.org/schema/integration"
       xmlns:int-jms="http://www.springframework.org/schema/integration/jms"
       xmlns:int-xml="http://www.springframework.org/schema/integration/xml"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
  http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
  http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd
  http://www.springframework.org/schema/integration/jms http://www.springframework.org/schema/integration/jms/spring-integration-jms.xsd
  http://www.springframework.org/schema/integration/xml
  http://www.springframework.org/schema/integration/xml/spring-integration-xml.xsd">

    <!-- The poller to manage the throughput to GOV.UK Notify -->
    <int:channel id="notifyPollerError" />
    <bean id="notifyPollerErrorQueue" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg value="Action.NotifyPollerErrors"/>
    </bean>
    <int-jms:outbound-channel-adapter id="notifyPollerErrorJmsOut" destination="notifyPollerErrorQueue" channel="notifyPollerError"/>
    <int:poller id="defaultPoller" default="true" error-channel="notifyPollerError" fixed-delay="${notify-default-poller.fixedDelay}" time-unit="MILLISECONDS" max-messages-per-poll="${notify-default-poller.msgPerPoll}" receive-timeout="5000" />

    <!--  First the inbound flow -->
    <!-- The inbound message container config - the inbound queue is defined here. We listen for actionInstructions
    coming from the ActionSvc. -->
    <bean id="actionInstructionMessageListenerContainer"
          class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="connectionFactory" />
        <property name="destinationName" value="Action.Notify" />
        <property name="maxConcurrentConsumers" value="1" />
        <property name="concurrentConsumers" value="1" />
        <property name="receiveTimeout" value="5000" />
        <property name="recoveryInterval" value="60000" />
        <property name="autoStartup" value="true" />
    </bean>

    <!-- need an input channel defined for MQ adapter to input to -->
    <int:channel id="actionInstructionXml" />

    <!-- anything sent to this channel is put on the queue Action.InvalidActionInstructions -->
    <int:channel id="actionInstructionXmlInvalid" />
    <bean id="invalidActionInstructionQueue" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg value="Action.InvalidActionInstructions"/>
    </bean>
    <int-jms:outbound-channel-adapter id="invalidActionInstructionJmsOut" destination="invalidActionInstructionQueue" channel="actionInstructionXmlInvalid"/>

    <!-- the MQ channel adapter reads from the Action.Notify Queue (see the container above) and inputs to actionInstructionXml -->
    <int-jms:message-driven-channel-adapter
            id="jmsIn" container="actionInstructionMessageListenerContainer" channel="actionInstructionXml" />

    <!-- First the SI message provided by the channel adapter is validated against the inbound schema -->
    <!-- Option to be used in Debug/Test: throw-exception-on-rejection="true" -->
    <int-xml:validating-filter id="actionInstructionValidator" input-channel="actionInstructionXml"
                               output-channel="actionInstructionXmlValid" schema-location="classpath:xsd/actionInstruction.xsd" discard-channel="actionInstructionXmlInvalid"/>

    <!-- Secondly the now validated xml is transformed into the jaxb generated object model -->
    <int:channel id="actionInstructionTransformed" datatype="uk.gov.ons.ctp.response.action.message.instruction.ActionInstruction">
        <!-- The line below to make it a PollableChannel so our defaultPoller is used to control flow to GOV.UK Notify -->
        <int:queue/>
    </int:channel>
    <int-xml:unmarshalling-transformer
            input-channel="actionInstructionXmlValid" output-channel="actionInstructionTransformed"
            unmarshaller="actionInstructionUnmarshaller" />

    <!-- The transformer uses this unmarshaller to do the heavy (un)lifting -->
    <bean id="actionInstructionUnmarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
        <property name="contextPath" value="uk.gov.ons.ctp.response.action.message.instruction" />
    </bean>

    <!-- we add an error channel so we can reprocess ActionInstructions when an exception is thrown in processInstruction
    in ActionInstructionReceiverImpl-->
    <int:channel id="actionInstructionProcessError">
        <int:queue />
    </int:channel>
    <int:channel id="actionInstructionProcessErrorFailedMsgOnly" >
        <int:queue />
    </int:channel>
    <int:transformer input-channel="actionInstructionProcessError" output-channel="actionInstructionProcessErrorFailedMsgOnly" expression="payload.failedMessage"/>
    <int:channel id="actionInstructionTransformedWithHeader" datatype="uk.gov.ons.ctp.response.action.message.instruction.ActionInstruction">
        <int:queue />
    </int:channel>
    <int:header-enricher input-channel="actionInstructionTransformed" output-channel="actionInstructionTransformedWithHeader">
        <int:error-channel value="actionInstructionProcessError"/>
    </int:header-enricher>
    <!-- Finally see the @ServiceActivator(inputChannel="actionInstructionTransformedWithHeader") -->

    <!-- START of section to publish ActionInstructions -->
    <bean id="actionInstructionOutboundQueue" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg value="Action.Notify"/>
    </bean>

    <int:annotation-config/>
    <!--  setup the outbound channels - note each queue needs a channel -->
    <int:channel id="actionInstructionOutbound" />
    <int:channel id="actionInstructionOutboundXml" />
    <int:channel id="actionInstruction" />

    <!--  the @Publisher sends to the marshalling-transformers input channel -->
    <int-xml:marshalling-transformer
            input-channel="actionInstructionOutbound" output-channel="actionInstructionOutboundXml"
            marshaller="actionInstructionOutboundMarshaller"
            result-transformer="actionInstructionOutboundTransformer"/>
    <!--  the actionInstructionOutboundMarshaller turns java objects into xml dom -->
    <bean id="actionInstructionOutboundMarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
        <property name="contextPath" value="uk.gov.ons.ctp.response.action.message.instruction" />
    </bean>
    <!--  the actionInstructionOutboundTransformer turns the xml dom into a string -->
    <bean id="actionInstructionOutboundTransformer" class="org.springframework.integration.xml.transformer.ResultToStringTransformer" />

    <!-- we validate here that we post action instructions matching the outbound schema -->
    <!-- Option to be used in Debug/Test: throw-exception-on-rejection="true" -->
    <int-xml:validating-filter id="actionInstructionOutboundValidator" input-channel="actionInstructionOutboundXml"
                               output-channel="actionInstructionOutboundXmlValid" schema-location="classpath:xsd/actionInstruction.xsd" discard-channel="actionInstructionXmlInvalid"/>

    <!-- define the channel name to send our xml string to -->
    <int:router input-channel="actionInstructionOutboundXmlValid" expression="'actionInstruction'"/>

    <!--  each channel adapter listens to one of our routed channels and adapts the SI message to a JMS message -->
    <int-jms:outbound-channel-adapter id="jmsout" channel="actionInstruction" destination="actionInstructionOutboundQueue"/>
    <!-- END of section to publish ActionInstructions -->
</beans>

